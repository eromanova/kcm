---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.2
  name: clusterauthentications.k0rdent.mirantis.com
spec:
  group: k0rdent.mirantis.com
  names:
    kind: ClusterAuthentication
    listKind: ClusterAuthenticationList
    plural: clusterauthentications
    shortNames:
    - clauth
    singular: clusterauthentication
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: ClusterAuthentication is the Schema for the cluster authentication
          configuration API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ClusterAuthenticationSpec defines the desired state of ClusterAuthentication
            properties:
              authenticationConfiguration:
                description: |-
                  AuthenticationConfiguration contains the full content of an [AuthenticationConfiguration] object,
                  which defines how the API server should perform request authentication.

                  For more details, see: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#using-authentication-configuration
                properties:
                  anonymous:
                    description: If present --anonymous-auth must not be set
                    properties:
                      conditions:
                        description: |-
                          If set, anonymous auth is only allowed if the request meets one of the
                          conditions.
                        items:
                          description: |-
                            AnonymousAuthCondition describes the condition under which anonymous auth
                            should be enabled.
                          properties:
                            path:
                              description: Path for which anonymous auth is enabled.
                              type: string
                          required:
                          - path
                          type: object
                        type: array
                      enabled:
                        type: boolean
                    required:
                    - enabled
                    type: object
                  apiVersion:
                    description: |-
                      APIVersion defines the versioned schema of this representation of an object.
                      Servers should convert recognized schemas to the latest internal value, and
                      may reject unrecognized values.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                    type: string
                  jwt:
                    description: "jwt is a list of authenticator to authenticate Kubernetes
                      users using\nJWT compliant tokens. The authenticator will attempt
                      to parse a raw ID token,\nverify it's been signed by the configured
                      issuer. The public key to verify the\nsignature is discovered
                      from the issuer's public endpoint using OIDC discovery.\nFor
                      an incoming token, each JWT authenticator will be attempted
                      in\nthe order in which it is specified in this list.  Note however
                      that\nother authenticators may run before or after the JWT authenticators.\nThe
                      specific position of JWT authenticators in relation to other\nauthenticators
                      is neither defined nor stable across releases.  Since\neach
                      JWT authenticator must have a unique issuer URL, at most one\nJWT
                      authenticator will attempt to cryptographically validate the
                      token.\n\nThe minimum valid JWT payload must contain the following
                      claims:\n{\n\t\t\"iss\": \"https://issuer.example.com\",\n\t\t\"aud\":
                      [\"audience\"],\n\t\t\"exp\": 1234567890,\n\t\t\"<username claim>\":
                      \"username\"\n}"
                    items:
                      description: JWTAuthenticator provides the configuration for
                        a single JWT authenticator.
                      properties:
                        claimMappings:
                          description: claimMappings points claims of a token to be
                            treated as user attributes.
                          properties:
                            extra:
                              description: |-
                                extra represents an option for the extra attribute.
                                expression must produce a string or string array value.
                                If the value is empty, the extra mapping will not be present.

                                hard-coded extra key/value
                                - key: "foo"
                                  valueExpression: "'bar'"
                                This will result in an extra attribute - foo: ["bar"]

                                hard-coded key, value copying claim value
                                - key: "foo"
                                  valueExpression: "claims.some_claim"
                                This will result in an extra attribute - foo: [value of some_claim]

                                hard-coded key, value derived from claim value
                                - key: "admin"
                                  valueExpression: '(has(claims.is_admin) && claims.is_admin) ? "true":""'
                                This will result in:
                                 - if is_admin claim is present and true, extra attribute - admin: ["true"]
                                 - if is_admin claim is present and false or is_admin claim is not present, no extra attribute will be added
                              items:
                                description: ExtraMapping provides the configuration
                                  for a single extra mapping.
                                properties:
                                  key:
                                    description: |-
                                      key is a string to use as the extra attribute key.
                                      key must be a domain-prefix path (e.g. example.org/foo). All characters before the first "/" must be a valid
                                      subdomain as defined by RFC 1123. All characters trailing the first "/" must
                                      be valid HTTP Path characters as defined by RFC 3986.
                                      key must be lowercase.
                                      Required to be unique.
                                    type: string
                                  valueExpression:
                                    description: |-
                                      valueExpression is a CEL expression to extract extra attribute value.
                                      valueExpression must produce a string or string array value.
                                      "", [], and null values are treated as the extra mapping not being present.
                                      Empty string values contained within a string array are filtered out.

                                      CEL expressions have access to the contents of the token claims, organized into CEL variable:
                                      - 'claims' is a map of claim names to claim values.
                                        For example, a variable named 'sub' can be accessed as 'claims.sub'.
                                        Nested claims can be accessed using dot notation, e.g. 'claims.foo.bar'.

                                      Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
                                    type: string
                                required:
                                - key
                                - valueExpression
                                type: object
                              type: array
                            groups:
                              description: |-
                                groups represents an option for the groups attribute.
                                The claim's value must be a string or string array claim.
                                If groups.claim is set, the prefix must be specified (and can be the empty string).
                                If groups.expression is set, the expression must produce a string or string array value.
                                 "", [], and null values are treated as the group mapping not being present.
                              properties:
                                claim:
                                  description: |-
                                    claim is the JWT claim to use.
                                    Mutually exclusive with expression.
                                  type: string
                                expression:
                                  description: |-
                                    expression represents the expression which will be evaluated by CEL.

                                    CEL expressions have access to the contents of the token claims, organized into CEL variable:
                                    - 'claims' is a map of claim names to claim values.
                                      For example, a variable named 'sub' can be accessed as 'claims.sub'.
                                      Nested claims can be accessed using dot notation, e.g. 'claims.foo.bar'.

                                    Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

                                    Mutually exclusive with claim and prefix.
                                  type: string
                                prefix:
                                  description: |-
                                    prefix is prepended to claim's value to prevent clashes with existing names.
                                    prefix needs to be set if claim is set and can be the empty string.
                                    Mutually exclusive with expression.
                                  type: string
                              type: object
                            uid:
                              description: |-
                                uid represents an option for the uid attribute.
                                Claim must be a singular string claim.
                                If uid.expression is set, the expression must produce a string value.
                              properties:
                                claim:
                                  description: |-
                                    claim is the JWT claim to use.
                                    Either claim or expression must be set.
                                    Mutually exclusive with expression.
                                  type: string
                                expression:
                                  description: |-
                                    expression represents the expression which will be evaluated by CEL.

                                    CEL expressions have access to the contents of the token claims, organized into CEL variable:
                                    - 'claims' is a map of claim names to claim values.
                                      For example, a variable named 'sub' can be accessed as 'claims.sub'.
                                      Nested claims can be accessed using dot notation, e.g. 'claims.foo.bar'.

                                    Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

                                    Mutually exclusive with claim.
                                  type: string
                              type: object
                            username:
                              description: |-
                                username represents an option for the username attribute.
                                The claim's value must be a singular string.
                                Same as the --oidc-username-claim and --oidc-username-prefix flags.
                                If username.expression is set, the expression must produce a string value.
                                If username.expression uses 'claims.email', then 'claims.email_verified' must be used in
                                username.expression or extra[*].valueExpression or claimValidationRules[*].expression.
                                An example claim validation rule expression that matches the validation automatically
                                applied when username.claim is set to 'email' is 'claims.?email_verified.orValue(true) == true'. By explicitly comparing
                                the value to true, we let type-checking see the result will be a boolean, and to make sure a non-boolean email_verified
                                claim will be caught at runtime.

                                In the flag based approach, the --oidc-username-claim and --oidc-username-prefix are optional. If --oidc-username-claim is not set,
                                the default value is "sub". For the authentication config, there is no defaulting for claim or prefix. The claim and prefix must be set explicitly.
                                For claim, if --oidc-username-claim was not set with legacy flag approach, configure username.claim="sub" in the authentication config.
                                For prefix:
                                    (1) --oidc-username-prefix="-", no prefix was added to the username. For the same behavior using authentication config,
                                        set username.prefix=""
                                    (2) --oidc-username-prefix="" and  --oidc-username-claim != "email", prefix was "<value of --oidc-issuer-url>#". For the same
                                        behavior using authentication config, set username.prefix="<value of issuer.url>#"
                                    (3) --oidc-username-prefix="<value>". For the same behavior using authentication config, set username.prefix="<value>"
                              properties:
                                claim:
                                  description: |-
                                    claim is the JWT claim to use.
                                    Mutually exclusive with expression.
                                  type: string
                                expression:
                                  description: |-
                                    expression represents the expression which will be evaluated by CEL.

                                    CEL expressions have access to the contents of the token claims, organized into CEL variable:
                                    - 'claims' is a map of claim names to claim values.
                                      For example, a variable named 'sub' can be accessed as 'claims.sub'.
                                      Nested claims can be accessed using dot notation, e.g. 'claims.foo.bar'.

                                    Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

                                    Mutually exclusive with claim and prefix.
                                  type: string
                                prefix:
                                  description: |-
                                    prefix is prepended to claim's value to prevent clashes with existing names.
                                    prefix needs to be set if claim is set and can be the empty string.
                                    Mutually exclusive with expression.
                                  type: string
                              type: object
                          required:
                          - username
                          type: object
                        claimValidationRules:
                          description: claimValidationRules are rules that are applied
                            to validate token claims to authenticate users.
                          items:
                            description: ClaimValidationRule provides the configuration
                              for a single claim validation rule.
                            properties:
                              claim:
                                description: |-
                                  claim is the name of a required claim.
                                  Same as --oidc-required-claim flag.
                                  Only string claim keys are supported.
                                  Mutually exclusive with expression and message.
                                type: string
                              expression:
                                description: |-
                                  expression represents the expression which will be evaluated by CEL.
                                  Must produce a boolean.

                                  CEL expressions have access to the contents of the token claims, organized into CEL variable:
                                  - 'claims' is a map of claim names to claim values.
                                    For example, a variable named 'sub' can be accessed as 'claims.sub'.
                                    Nested claims can be accessed using dot notation, e.g. 'claims.foo.bar'.
                                  Must return true for the validation to pass.

                                  Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

                                  Mutually exclusive with claim and requiredValue.
                                type: string
                              message:
                                description: |-
                                  message customizes the returned error message when expression returns false.
                                  message is a literal string.
                                  Mutually exclusive with claim and requiredValue.
                                type: string
                              requiredValue:
                                description: |-
                                  requiredValue is the value of a required claim.
                                  Same as --oidc-required-claim flag.
                                  Only string claim values are supported.
                                  If claim is set and requiredValue is not set, the claim must be present with a value set to the empty string.
                                  Mutually exclusive with expression and message.
                                type: string
                            type: object
                          type: array
                        issuer:
                          description: issuer contains the basic OIDC provider connection
                            options.
                          properties:
                            audienceMatchPolicy:
                              description: |-
                                audienceMatchPolicy defines how the "audiences" field is used to match the "aud" claim in the presented JWT.
                                Allowed values are:
                                1. "MatchAny" when multiple audiences are specified and
                                2. empty (or unset) or "MatchAny" when a single audience is specified.

                                - MatchAny: the "aud" claim in the presented JWT must match at least one of the entries in the "audiences" field.
                                For example, if "audiences" is ["foo", "bar"], the "aud" claim in the presented JWT must contain either "foo" or "bar" (and may contain both).

                                - "": The match policy can be empty (or unset) when a single audience is specified in the "audiences" field. The "aud" claim in the presented JWT must contain the single audience (and may contain others).

                                For more nuanced audience validation, use claimValidationRules.
                                  example: claimValidationRule[].expression: 'sets.equivalent(claims.aud, ["bar", "foo", "baz"])' to require an exact match.
                              type: string
                            audiences:
                              description: |-
                                audiences is the set of acceptable audiences the JWT must be issued to.
                                At least one of the entries must match the "aud" claim in presented JWTs.
                                Same value as the --oidc-client-id flag (though this field supports an array).
                                Required to be non-empty.
                              items:
                                type: string
                              type: array
                            certificateAuthority:
                              description: |-
                                certificateAuthority contains PEM-encoded certificate authority certificates
                                used to validate the connection when fetching discovery information.
                                If unset, the system verifier is used.
                                Same value as the content of the file referenced by the --oidc-ca-file flag.
                              type: string
                            discoveryURL:
                              description: |-
                                discoveryURL, if specified, overrides the URL used to fetch discovery
                                information instead of using "{url}/.well-known/openid-configuration".
                                The exact value specified is used, so "/.well-known/openid-configuration"
                                must be included in discoveryURL if needed.

                                The "issuer" field in the fetched discovery information must match the "issuer.url" field
                                in the AuthenticationConfiguration and will be used to validate the "iss" claim in the presented JWT.
                                This is for scenarios where the well-known and jwks endpoints are hosted at a different
                                location than the issuer (such as locally in the cluster).

                                Example:
                                A discovery url that is exposed using kubernetes service 'oidc' in namespace 'oidc-namespace'
                                and discovery information is available at '/.well-known/openid-configuration'.
                                discoveryURL: "https://oidc.oidc-namespace/.well-known/openid-configuration"
                                certificateAuthority is used to verify the TLS connection and the hostname on the leaf certificate
                                must be set to 'oidc.oidc-namespace'.

                                curl https://oidc.oidc-namespace/.well-known/openid-configuration (.discoveryURL field)
                                {
                                    issuer: "https://oidc.example.com" (.url field)
                                }

                                discoveryURL must be different from url.
                                Required to be unique across all JWT authenticators.
                                Note that egress selection configuration is not used for this network connection.
                              type: string
                            egressSelectorType:
                              description: |-
                                egressSelectorType is an indicator of which egress selection should be used for sending all traffic related
                                to this issuer (discovery, JWKS, distributed claims, etc).  If unspecified, no custom dialer is used.
                                When specified, the valid choices are "controlplane" and "cluster".  These correspond to the associated
                                values in the --egress-selector-config-file.

                                - controlplane: for traffic intended to go to the control plane.

                                - cluster: for traffic intended to go to the system being managed by Kubernetes.
                              type: string
                            url:
                              description: |-
                                url points to the issuer URL in a format https://url or https://url/path.
                                This must match the "iss" claim in the presented JWT, and the issuer returned from discovery.
                                Same value as the --oidc-issuer-url flag.
                                Discovery information is fetched from "{url}/.well-known/openid-configuration" unless overridden by discoveryURL.
                                Required to be unique across all JWT authenticators.
                                Note that egress selection configuration is not used for this network connection.
                              type: string
                          required:
                          - audiences
                          - url
                          type: object
                        userValidationRules:
                          description: |-
                            userValidationRules are rules that are applied to final user before completing authentication.
                            These allow invariants to be applied to incoming identities such as preventing the
                            use of the system: prefix that is commonly used by Kubernetes components.
                            The validation rules are logically ANDed together and must all return true for the validation to pass.
                          items:
                            description: UserValidationRule provides the configuration
                              for a single user info validation rule.
                            properties:
                              expression:
                                description: |-
                                  expression represents the expression which will be evaluated by CEL.
                                  Must return true for the validation to pass.

                                  CEL expressions have access to the contents of UserInfo, organized into CEL variable:
                                  - 'user' - authentication.k8s.io/v1, Kind=UserInfo object
                                     Refer to https://github.com/kubernetes/api/blob/release-1.28/authentication/v1/types.go#L105-L122 for the definition.
                                     API documentation: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#userinfo-v1-authentication-k8s-io

                                  Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
                                type: string
                              message:
                                description: |-
                                  message customizes the returned error message when rule returns false.
                                  message is a literal string.
                                type: string
                            required:
                            - expression
                            type: object
                          type: array
                      required:
                      - claimMappings
                      - issuer
                      type: object
                    type: array
                  kind:
                    description: |-
                      Kind is a string value representing the REST resource this object represents.
                      Servers may infer this from the endpoint the client submits requests to.
                      Cannot be updated.
                      In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    type: string
                required:
                - jwt
                type: object
              caSecret:
                description: |-
                  CASecret is the reference to the secret containing the CA certificates used to validate the connection
                  to the issuers endpoints.
                properties:
                  name:
                    description: Name specifies the name of the Secret containing
                      the CA certificates.
                    type: string
                  namespace:
                    description: |-
                      Namespace specifies the namespace of the Secret containing the CA certificates.
                      Defaults to the namespace of the ClusterAuthentication resource if omitted.
                    type: string
                required:
                - name
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
